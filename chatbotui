from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel
import asyncio
import os
import sys
from dotenv import load_dotenv

# Add the parent directory to Python path to import your MCP client
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

load_dotenv()

app = FastAPI(title="FlightOps MCP API", version="1.0.0")

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://127.0.0.1:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Pydantic models
class QueryRequest(BaseModel):
    query: str

class HealthResponse(BaseModel):
    status: str
    tools_available: int = 0
    connection: str
    error: str = None

# Global client instance
client = None

async def initialize_client():
    """Initialize the FlightOps MCP client"""
    global client
    try:
        # Import your MCP client - adjust the import according to your actual file structure
        from server import FlightOpsMCPClient
        client = FlightOpsMCPClient()
        await client.connect()
        print("✅ FlightOps MCP Client initialized successfully")
        return True
    except Exception as e:
        print(f"❌ Failed to initialize client: {e}")
        return False

@app.on_event("startup")
async def startup_event():
    """Initialize client on startup"""
    await initialize_client()

@app.get("/api/health", response_model=HealthResponse)
async def health_check():
    """Health check endpoint"""
    try:
        if client:
            tools = await client.list_tools()
            return HealthResponse(
                status="healthy",
                tools_available=len(tools.get('tools', {})),
                connection="connected"
            )
        else:
            return HealthResponse(
                status="unhealthy", 
                connection="disconnected",
                error="Client not initialized"
            )
    except Exception as e:
        return HealthResponse(
            status="unhealthy",
            connection="error",
            error=str(e)
        )

@app.post("/api/query")
async def handle_query(request: QueryRequest):
    """Handle chat queries"""
    try:
        if not client:
            raise HTTPException(status_code=503, detail="Client not initialized")
        
        result = await client.run_query(request.query)
        return JSONResponse(content=result)
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")

@app.get("/api/tools")
async def list_tools():
    """List available tools"""
    try:
        if not client:
            raise HTTPException(status_code=503, detail="Client not initialized")
        
        tools = await client.list_tools()
        return tools
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=5000)
###############################################################################
import React, { useState, useRef, useEffect } from 'react';
import { Send, Plane, Clock, User, Wifi, AlertTriangle, Menu, X } from 'lucide-react';
import './App.css';

// Import Indigo logo - make sure to place indigo-logo.png in src/assets
import indigoLogo from './assets/indigo-logo.png';

function App() {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [connectionStatus, setConnectionStatus] = useState('disconnected');
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const messagesEndRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // Check server health on component mount
  useEffect(() => {
    checkHealth();
  }, []);

  const checkHealth = async () => {
    try {
      setConnectionStatus('connecting');
      const response = await fetch('/api/health');
      if (response.ok) {
        setConnectionStatus('connected');
      } else {
        setConnectionStatus('error');
      }
    } catch (error) {
      setConnectionStatus('error');
    }
  };

  const sendMessage = async () => {
    if (!input.trim() || isLoading) return;

    const userMessage = {
      id: Date.now(),
      type: 'user',
      content: input,
      timestamp: new Date().toLocaleTimeString()
    };

    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setIsLoading(true);

    try {
      const response = await fetch('/api/query', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ query: input }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();

      if (data.error) {
        const errorMessage = {
          id: Date.now() + 1,
          type: 'error',
          content: `Error: ${data.error}`,
          timestamp: new Date().toLocaleTimeString()
        };
        setMessages(prev => [...prev, errorMessage]);
      } else {
        const assistantMessage = {
          id: Date.now() + 1,
          type: 'assistant',
          content: data.summary?.summary || 'No summary available',
          rawData: data,
          timestamp: new Date().toLocaleTimeString()
        };
        setMessages(prev => [...prev, assistantMessage]);
      }
    } catch (error) {
      console.error('Error sending message:', error);
      const errorMessage = {
        id: Date.now() + 1,
        type: 'error',
        content: `Failed to connect to server. Please make sure the backend is running. Error: ${error.message}`,
        timestamp: new Date().toLocaleTimeString()
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  const clearChat = () => {
    setMessages([]);
  };

  const getStatusIcon = () => {
    switch (connectionStatus) {
      case 'connected':
        return <Wifi className="status-icon connected" size={16} />;
      case 'connecting':
        return <Clock className="status-icon connecting" size={16} />;
      case 'error':
        return <AlertTriangle className="status-icon error" size={16} />;
      default:
        return <Wifi className="status-icon disconnected" size={16} />;
    }
  };

  const getStatusText = () => {
    switch (connectionStatus) {
      case 'connected':
        return 'Connected to FlightOps';
      case 'connecting':
        return 'Connecting...';
      case 'error':
        return 'Connection Error';
      default:
        return 'Disconnected';
    }
  };

  const quickQuestions = [
    "Show me basic info for flight 6E 215",
    "What equipment was used on flight 6E 101?",
    "Get delay summary for flight 6E 215",
    "Show fuel summary for flight 6E 304",
    "Check passenger info for flight 6E 512"
  ];

  const handleQuickQuestion = (question) => {
    setInput(question);
  };

  return (
    <div className="app">
      {/* Sidebar */}
      <div className={`sidebar ${sidebarOpen ? 'open' : 'closed'}`}>
        <div className="sidebar-header">
          <img src={indigoLogo} alt="Indigo Airlines" className="indigo-logo" />
          <button 
            className="sidebar-toggle"
            onClick={() => setSidebarOpen(!sidebarOpen)}
          >
            {sidebarOpen ? <X size={20} /> : <Menu size={20} />}
          </button>
        </div>
        
        {sidebarOpen && (
          <div className="sidebar-content">
            <div className="welcome-section">
              <h3>Welcome to Indigo FlightOps!</h3>
              <p>Your intelligent assistant for flight operations data.</p>
            </div>

            <div className="quick-questions">
              <h4>Quick Questions</h4>
              <div className="question-buttons">
                {quickQuestions.map((question, index) => (
                  <button
                    key={index}
                    className="question-btn"
                    onClick={() => handleQuickQuestion(question)}
                    disabled={isLoading}
                  >
                    {question}
                  </button>
                ))}
              </div>
            </div>

            <div className="flight-info">
              <h4>Flight Data Available</h4>
              <ul>
                <li>✓ Basic Flight Information</li>
                <li>✓ Aircraft Equipment Details</li>
                <li>✓ Operation Times & Delays</li>
                <li>✓ Fuel Consumption Data</li>
                <li>✓ Passenger Information</li>
                <li>✓ Crew Connections</li>
              </ul>
            </div>

            <div className="connection-status">
              <div className="status-indicator">
                {getStatusIcon()}
                <span>{getStatusText()}</span>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Main Content */}
      <div className={`main-content ${!sidebarOpen ? 'expanded' : ''}`}>
        <header className="app-header">
          <div className="header-content">
            <div className="logo">
              <Plane className="logo-icon" size={24} />
              <h1>Indigo FlightOps Assistant</h1>
            </div>
            <div className="status">
              {getStatusIcon()}
              <span className="status-text">{getStatusText()}</span>
            </div>
          </div>
        </header>

        <div className="chat-container">
          <div className="messages-container">
            {messages.length === 0 ? (
              <div className="empty-state">
                <img src={indigoLogo} alt="Indigo Airlines" className="empty-logo" />
                <h2>Welcome to Indigo FlightOps Assistant</h2>
                <p>Ask me about flight information, equipment details, delays, fuel data, and more for Indigo Airlines flights.</p>
                <div className="example-queries">
                  <h4>Try asking about:</h4>
                  <div className="example-cards">
                    <div className="example-card">
                      <Plane size={20} />
                      <span>Flight 6E 215 basic info</span>
                    </div>
                    <div className="example-card">
                      <Clock size={20} />
                      <span>Delays for flight 6E 304</span>
                    </div>
                    <div className="example-card">
                      <User size={20} />
                      <span>Passenger count on 6E 512</span>
                    </div>
                    <div className="example-card">
                      <Wifi size={20} />
                      <span>Aircraft equipment details</span>
                    </div>
                  </div>
                </div>
              </div>
            ) : (
              messages.map((message) => (
                <div key={message.id} className={`message ${message.type}`}>
                  <div className="message-header">
                    <div className="message-sender">
                      {message.type === 'user' ? (
                        <User size={16} />
                      ) : message.type === 'error' ? (
                        <AlertTriangle size={16} />
                      ) : (
                        <Plane size={16} />
                      )}
                      <span>
                        {message.type === 'user' ? 'You' : 
                         message.type === 'error' ? 'Error' : 'FlightOps Assistant'}
                      </span>
                    </div>
                    <span className="message-time">{message.timestamp}</span>
                  </div>
                  <div className="message-content">
                    {message.content}
                  </div>
                  {message.rawData && message.rawData.plan && (
                    <div className="message-tools">
                      <details>
                        <summary>Tools Used ({message.rawData.plan.length})</summary>
                        <div className="tools-list">
                          {message.rawData.plan.map((step, index) => (
                            <div key={index} className="tool-item">
                              <strong>{step.tool}</strong>
                              {step.arguments && Object.keys(step.arguments).length > 0 && (
                                <div className="tool-args">
                                  {Object.entries(step.arguments).map(([key, value]) => (
                                    <span key={key} className="tool-arg">
                                      {key}: {String(value)}
                                    </span>
                                  ))}
                                </div>
                              )}
                            </div>
                          ))}
                        </div>
                      </details>
                    </div>
                  )}
                </div>
              ))
            )}
            {isLoading && (
              <div className="message assistant">
                <div className="message-header">
                  <div className="message-sender">
                    <Plane size={16} />
                    <span>FlightOps Assistant</span>
                  </div>
                </div>
                <div className="message-content loading">
                  <div className="typing-indicator">
                    <span></span>
                    <span></span>
                    <span></span>
                  </div>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>

          <div className="input-container">
            <div className="input-wrapper">
              <textarea
                value={input}
                onChange={(e) => setInput(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="Ask about Indigo flight information, equipment, delays, fuel data..."
                disabled={isLoading}
                rows={1}
              />
              <button 
                onClick={sendMessage} 
                disabled={!input.trim() || isLoading}
                className="send-button"
              >
                <Send size={18} />
              </button>
            </div>
            {messages.length > 0 && (
              <button onClick={clearChat} className="clear-button">
                Clear Chat
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

export default App;
###################################################################################
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

:root {
  --indigo-blue: #0D2D5C;
  --indigo-orange: #FF6600;
  --indigo-light: #1E4A8B;
  --indigo-lighter: #2A5BA0;
  --secondary-color: #64748b;
  --success-color: #10b981;
  --warning-color: #f59e0b;
  --error-color: #ef4444;
  --bg-color: #f8fafc;
  --surface-color: #ffffff;
  --text-primary: #1e293b;
  --text-secondary: #64748b;
  --border-color: #e2e8f0;
  --shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
  --sidebar-width: 300px;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
  background-color: var(--bg-color);
  color: var(--text-primary);
  line-height: 1.5;
}

.app {
  height: 100vh;
  display: flex;
  background: linear-gradient(135deg, var(--indigo-blue) 0%, var(--indigo-light) 100%);
}

/* Sidebar Styles */
.sidebar {
  width: var(--sidebar-width);
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(10px);
  border-right: 1px solid var(--border-color);
  display: flex;
  flex-direction: column;
  transition: transform 0.3s ease;
  box-shadow: var(--shadow);
}

.sidebar.closed {
  transform: translateX(-100%);
  width: 0;
}

.sidebar-header {
  padding: 1.5rem;
  border-bottom: 1px solid var(--border-color);
  display: flex;
  justify-content: space-between;
  align-items: center;
  background: var(--surface-color);
}

.indigo-logo {
  height: 40px;
  width: auto;
}

.sidebar-toggle {
  background: none;
  border: none;
  cursor: pointer;
  color: var(--indigo-blue);
  padding: 0.5rem;
  border-radius: 6px;
  transition: background-color 0.2s;
}

.sidebar-toggle:hover {
  background: var(--bg-color);
}

.sidebar-content {
  flex: 1;
  padding: 1.5rem;
  display: flex;
  flex-direction: column;
  gap: 2rem;
  overflow-y: auto;
}

.welcome-section h3 {
  color: var(--indigo-blue);
  margin-bottom: 0.5rem;
  font-size: 1.1rem;
}

.welcome-section p {
  color: var(--text-secondary);
  font-size: 0.9rem;
}

.quick-questions h4,
.flight-info h4 {
  color: var(--indigo-blue);
  margin-bottom: 1rem;
  font-size: 1rem;
}

.question-buttons {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.question-btn {
  background: var(--bg-color);
  border: 1px solid var(--border-color);
  border-radius: 8px;
  padding: 0.75rem;
  text-align: left;
  cursor: pointer;
  font-size: 0.875rem;
  transition: all 0.2s;
  color: var(--text-primary);
}

.question-btn:hover:not(:disabled) {
  background: var(--indigo-blue);
  color: white;
  border-color: var(--indigo-blue);
}

.question-btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.flight-info ul {
  list-style: none;
  font-size: 0.875rem;
}

.flight-info li {
  padding: 0.5rem 0;
  color: var(--text-secondary);
  border-bottom: 1px solid var(--border-color);
}

.flight-info li:last-child {
  border-bottom: none;
}

.connection-status {
  margin-top: auto;
  padding-top: 1rem;
  border-top: 1px solid var(--border-color);
}

.status-indicator {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 0.875rem;
  color: var(--text-secondary);
}

/* Main Content */
.main-content {
  flex: 1;
  display: flex;
  flex-direction: column;
  transition: margin-left 0.3s ease;
}

.main-content.expanded {
  margin-left: calc(-1 * var(--sidebar-width));
}

.app-header {
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(10px);
  border-bottom: 1px solid var(--border-color);
  padding: 1rem 2rem;
  box-shadow: var(--shadow);
}

.header-content {
  display: flex;
  justify-content: space-between;
  align-items: center;
  max-width: 100%;
}

.logo {
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

.logo-icon {
  color: var(--indigo-orange);
}

.logo h1 {
  font-size: 1.5rem;
  font-weight: 700;
  color: var(--indigo-blue);
}

.status {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 0.875rem;
}

.status-icon.connected {
  color: var(--success-color);
}

.status-icon.connecting {
  color: var(--warning-color);
  animation: pulse 2s infinite;
}

.status-icon.error,
.status-icon.disconnected {
  color: var(--error-color);
}

.status-text {
  color: var(--text-secondary);
}

@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.5; }
}

.chat-container {
  flex: 1;
  display: flex;
  flex-direction: column;
  padding: 2rem;
  gap: 1rem;
}

.messages-container {
  flex: 1;
  overflow-y: auto;
  background: var(--surface-color);
  border-radius: 12px;
  box-shadow: var(--shadow);
  padding: 1.5rem;
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.empty-state {
  text-align: center;
  padding: 3rem 2rem;
  color: var(--text-secondary);
}

.empty-logo {
  height: 80px;
  margin: 0 auto 1rem;
}

.empty-state h2 {
  margin-bottom: 0.5rem;
  color: var(--indigo-blue);
}

.example-queries {
  margin-top: 2rem;
}

.example-queries h4 {
  margin-bottom: 1rem;
  color: var(--text-primary);
}

.example-cards {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1rem;
  margin-top: 1rem;
}

.example-card {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  padding: 1rem;
  background: var(--bg-color);
  border-radius: 8px;
  border: 1px solid var(--border-color);
  transition: all 0.2s;
  cursor: pointer;
}

.example-card:hover {
  border-color: var(--indigo-blue);
  transform: translateY(-2px);
}

.example-card svg {
  color: var(--indigo-orange);
}

.message {
  padding: 1rem;
  border-radius: 12px;
  max-width: 80%;
}

.message.user {
  align-self: flex-end;
  background: var(--indigo-blue);
  color: white;
  margin-left: auto;
}

.message.assistant {
  align-self: flex-start;
  background: var(--bg-color);
  border: 1px solid var(--border-color);
}

.message.error {
  align-self: flex-start;
  background: #fef2f2;
  border: 1px solid var(--error-color);
  color: var(--error-color);
}

.message-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 0.5rem;
  font-size: 0.75rem;
  opacity: 0.8;
}

.message-sender {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-weight: 600;
}

.message-time {
  font-size: 0.7rem;
}

.message-content {
  line-height: 1.6;
}

.message.user .message-content {
  color: white;
}

.message-tools {
  margin-top: 0.75rem;
  padding-top: 0.75rem;
  border-top: 1px solid var(--border-color);
}

.message-tools details {
  font-size: 0.875rem;
}

.message-tools summary {
  cursor: pointer;
  font-weight: 600;
  color: var(--indigo-blue);
}

.tools-list {
  margin-top: 0.5rem;
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.tool-item {
  padding: 0.5rem;
  background: var(--surface-color);
  border-radius: 6px;
  border: 1px solid var(--border-color);
}

.tool-args {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
  margin-top: 0.25rem;
}

.tool-arg {
  padding: 0.25rem 0.5rem;
  background: var(--bg-color);
  border-radius: 4px;
  font-size: 0.75rem;
  font-family: monospace;
}

.loading {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.typing-indicator {
  display: flex;
  gap: 0.25rem;
}

.typing-indicator span {
  height: 8px;
  width: 8px;
  border-radius: 50%;
  background: var(--secondary-color);
  animation: typing 1.4s infinite ease-in-out;
}

.typing-indicator span:nth-child(1) { animation-delay: -0.32s; }
.typing-indicator span:nth-child(2) { animation-delay: -0.16s; }

@keyframes typing {
  0%, 80%, 100% { transform: scale(0); }
  40% { transform: scale(1); }
}

.input-container {
  background: var(--surface-color);
  border-radius: 12px;
  box-shadow: var(--shadow);
  padding: 1rem;
}

.input-wrapper {
  display: flex;
  gap: 0.75rem;
  align-items: flex-end;
}

.input-wrapper textarea {
  flex: 1;
  border: 1px solid var(--border-color);
  border-radius: 8px;
  padding: 0.75rem;
  font-family: inherit;
  font-size: 0.875rem;
  resize: none;
  min-height: 44px;
  max-height: 120px;
  outline: none;
  transition: border-color 0.2s;
}

.input-wrapper textarea:focus {
  border-color: var(--indigo-blue);
  box-shadow: 0 0 0 3px rgba(13, 45, 92, 0.1);
}

.input-wrapper textarea:disabled {
  background-color: var(--bg-color);
  opacity: 0.6;
}

.send-button {
  background: var(--indigo-orange);
  color: white;
  border: none;
  border-radius: 8px;
  padding: 0.75rem;
  cursor: pointer;
  transition: background-color 0.2s;
  display: flex;
  align-items: center;
  justify-content: center;
  min-width: 44px;
  min-height: 44px;
}

.send-button:hover:not(:disabled) {
  background: #e55a00;
}

.send-button:disabled {
  background: var(--secondary-color);
  cursor: not-allowed;
  opacity: 0.6;
}

.clear-button {
  margin-top: 0.75rem;
  background: none;
  border: 1px solid var(--border-color);
  border-radius: 6px;
  padding: 0.5rem 1rem;
  cursor: pointer;
  font-size: 0.875rem;
  color: var(--text-secondary);
  transition: all 0.2s;
}

.clear-button:hover {
  background: var(--bg-color);
  color: var(--error-color);
  border-color: var(--error-color);
}

/* Responsive Design */
@media (max-width: 768px) {
  .sidebar {
    position: fixed;
    height: 100%;
    z-index: 1000;
  }

  .main-content.expanded {
    margin-left: 0;
  }

  .app-header {
    padding: 1rem;
  }

  .chat-container {
    padding: 1rem;
  }

  .messages-container {
    padding: 1rem;
  }

  .message {
    max-width: 90%;
  }

  .header-content {
    flex-direction: column;
    gap: 0.5rem;
    align-items: flex-start;
  }

  .status {
    align-self: flex-end;
  }

  .example-cards {
    grid-template-columns: 1fr;
  }
}

/* Scrollbar Styling */
.messages-container::-webkit-scrollbar,
.sidebar-content::-webkit-scrollbar {
  width: 6px;
}

.messages-container::-webkit-scrollbar-track,
.sidebar-content::-webkit-scrollbar-track {
  background: transparent;
}

.messages-container::-webkit-scrollbar-thumb,
.sidebar-content::-webkit-scrollbar-thumb {
  background: var(--border-color);
  border-radius: 3px;
}

.messages-container::-webkit-scrollbar-thumb:hover,
.sidebar-content::-webkit-scrollbar-thumb:hover {
  background: var(--secondary-color);
}
#######################################################################
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    port: 3000,
    proxy: {
      '/api': {
        target: 'http://localhost:5000',
        changeOrigin: true
      }
    }
  }
})
######################################################################
